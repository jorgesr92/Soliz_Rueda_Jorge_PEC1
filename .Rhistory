fontsize_row = 5,   # Tamaño de letra de las filas
fontsize_col = 2     # Tamaño de letra de las columnas
)
library(pheatmap)
# Calcular coeficiente de variación
cv <- apply(assay(se), 1, function(x) sd(x) / mean(x))
top_metabs <- names(sort(cv, decreasing = TRUE))[1:25]
# Crear mapa de calor
pheatmap(assay(se)[top_metabs, ],
annotation_col = as.data.frame(colData(se)),
scale = "row",
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
main = "Top 25 metabolitos más variables",
fontsize_row = 8,   # Tamaño de letra de las filas
fontsize_col = 2     # Tamaño de letra de las columnas
)
library(pheatmap)
# Calcular coeficiente de variación
cv <- apply(assay(se), 1, function(x) sd(x) / mean(x))
top_metabs <- names(sort(cv, decreasing = TRUE))[1:25]
# Crear mapa de calor
pheatmap(assay(se)[top_metabs, ],
annotation_col = as.data.frame(colData(se)),
scale = "row",
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
main = "Top 25 metabolitos más variables",
fontsize_row = 6,   # Tamaño de letra de las filas
fontsize_col = 2     # Tamaño de letra de las columnas
)
library(pheatmap)
# Calcular coeficiente de variación
cv <- apply(assay(se), 1, function(x) sd(x) / mean(x))
top_metabs <- names(sort(cv, decreasing = TRUE))[1:25]
# Crear mapa de calor
pheatmap(assay(se)[top_metabs, ],
annotation_col = as.data.frame(colData(se)),
scale = "row",
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
main = "Top 25 metabolitos más variables",
fontsize_row = 5,   # Tamaño de letra de las filas
fontsize_col = 2     # Tamaño de letra de las columnas
)
library(pheatmap)
# Calcular coeficiente de variación
cv <- apply(assay(se), 1, function(x) sd(x) / mean(x))
top_metabs <- names(sort(cv, decreasing = TRUE))[1:25]
# Crear mapa de calor
pheatmap(assay(se)[top_metabs, ],
annotation_col = as.data.frame(colData(se)),
scale = "row",
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
main = "Top 25 metabolitos más variables",
fontsize_row = 6,   # Tamaño de letra de las filas
fontsize_col = 2     # Tamaño de letra de las columnas
)
library(pheatmap)
# Calcular coeficiente de variación
cv <- apply(assay(se), 1, function(x) sd(x) / mean(x))
top_metabs <- names(sort(cv, decreasing = TRUE))[1:25]
ann_col <- as.data.frame(colData(se))
ann_col$PatientID <- NULL  # Eliminar esa variable
# Crear mapa de calor
pheatmap(assay(se)[top_metabs, ],
annotation_col = as.data.frame(colData(se)),
scale = "row",
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
main = "Top 25 metabolitos más variables",
fontsize_row = 6,   # Tamaño de letra de las filas
fontsize_col = 2     # Tamaño de letra de las columnas
)
expr <- assay(se)
summary_stats <- as.data.frame(t(apply(expr, 1, summary)))
summary_stats$sd <- apply(expr, 1, sd)
summary_stats$cv <- summary_stats$sd / summary_stats$`Mean`
head(summary_stats)
View(expr)
for (m in metabs) {
p <- ggplot(
dplyr::filter(df_long, Metabolite == m),
aes(x = Value, fill = Group)
) +
geom_histogram(bins = 30, alpha = 0.6, position = "identity") +
theme_minimal() +
labs(title = paste("Histograma de", m)) +
theme(legend.position = "bottom")
}
for (m in unique(df_long$Metabolite)) {
print(
ggplot(filter(df_long, Metabolite == m),
aes(x = Group, y = Value, fill = Group)) +
geom_boxplot() +
theme_minimal() +
labs(title = paste("Boxplot de", m)) +
theme(legend.position = "none")
)
}
# cargar paquetes y objeto
library(SummarizedExperiment)
library(tidyverse)
load("C:/Users/soliz-j/Downloads/Master/SummarizedExperiment_Object.Rda")
se
# generar bloxplot por cada metabolito
for (m in unique(df_long$Metabolite)) {
print(
ggplot(filter(df_long, Metabolite == m),
aes(x = Group, y = Value, fill = Group)) +
geom_boxplot() +
theme_minimal() +
labs(title = paste("Boxplot de", m)) +
theme(legend.position = "none")
)
}
cat("\n\n")  # Añade espacio entre gráficos en el HTML
for (m in metabs) {
print(
ggplot(
dplyr::filter(df_long, Metabolite == m),
aes(x = Value, fill = Group)
) +
geom_histogram(bins = 30, alpha = 0.6, position = "identity") +
theme_minimal() +
labs(title = paste("Histograma de", m)) +
theme(legend.position = "bottom")
)
}
library(ggplot2)
library(knitr)
# lista de metabolitos
metabs <- unique(df_long$Metabolite)
# generar histograma para cada metabolito
for (m in metabs) {
print(
ggplot(
dplyr::filter(df_long, Metabolite == m),
aes(x = Value, fill = Group)
) +
geom_histogram(bins = 30, alpha = 0.6, position = "identity") +
theme_minimal() +
labs(title = paste("Histograma de", m)) +
theme(legend.position = "bottom")
)
}
library(ggplot2)
library(knitr)
# lista de metabolitos
metabs <- unique(df_long$Metabolite)
# generar histograma para cada metabolito
for (m in metabs) {
print(
ggplot(
dplyr::filter(df_long, Metabolite == m),
aes(x = Value, fill = Group)
) +
geom_histogram(bins = 30, alpha = 0.6, position = "identity") +
theme_minimal() +
labs(title = paste("Histograma de", m)) +
theme(legend.position = "bottom")
)
}
# calcular coeficiente de variación
cv <- apply(assay(se), 1, function(x) sd(x) / mean(x))
top_metabs <- names(sort(cv, decreasing = TRUE))[1:25]
# generar heatmap
pheatmap(assay(se)[top_metabs, ],
annotation_col = as.data.frame(colData(se)),
scale = "row",
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
main = "Top 25 metabolitos más variables",
fontsize_row = 6,   # Tamaño de letra de las filas
fontsize_col = 2     # Tamaño de letra de las columnas
)
# PCA
# escalar y transponer matriz para generar el PCA
scaled_expr <- scale(t(expr))
pca <- prcomp(scaled_expr)
# agrupar datos
pca_df <- as.data.frame(pca$x)
pca_df$Group <- colData(se)$Group
# generar PCA
ggplot(pca_df, aes(x = PC1, y = PC2, color = Group)) +
geom_point(size = 3) +
theme_minimal() +
labs(title = "PCA de metabolomica de control vs cachexia")
View(expr)
# escalar y transponer matriz para generar el PCA
scaled_expr <- scale(t(matriz))
pca <- prcomp(scaled_expr)
# agrupar datos
pca_df <- as.data.frame(pca$x)
pca_df$Group <- colData(se)$Group
# generar PCA
ggplot(pca_df, aes(x = PC1, y = PC2, color = Group)) +
geom_point(size = 3) +
theme_minimal() +
labs(title = "PCA de metabolomica de control vs cachexia")
# escalar y transponer matriz para generar el PCA
scaled_expr <- scale(t(matriz))
pca <- prcomp(scaled_expr)
# agrupar datos
pca_df <- as.data.frame(pca$x)
pca_df$Group <- colData(se)$Group
# generar PCA
ggplot(pca_df, aes(x = PC1, y = PC2, color = Group)) +
geom_point(size = 3) +
theme_minimal() +
labs(title = "PCA de metabolomica de control vs cachexia")
library(ggplot2)
library(knitr)
# lista de metabolitos
metabs <- unique(df_long$Metabolite)
# generar histograma para cada metabolito
plots <- lapply(metabs, function(m) {
ggplot(
dplyr::filter(df_long, Metabolite == m),
aes(x = Value, fill = Group)
) +
geom_histogram(bins = 30, alpha = 0.6, position = "identity") +
theme_minimal() +
labs(title = paste("Histograma de", m)) +
theme(legend.position = "bottom")
})
# Mostrar de 4 en 4
n <- 4  # Cambia a 3 si quieres 3 en 3
for (i in seq(1, length(plots), by = n)) {
do.call(grid.arrange, c(plots[i:min(i + n - 1, length(plots))], ncol = 2))
}
library(ggplot2)
library(knitr)
library(ggplot2)
library(gridExtra)
# lista de metabolitos
metabs <- unique(df_long$Metabolite)
# generar histograma para cada metabolito
plots <- lapply(metabs, function(m) {
ggplot(
dplyr::filter(df_long, Metabolite == m),
aes(x = Value, fill = Group)
) +
geom_histogram(bins = 30, alpha = 0.6, position = "identity") +
theme_minimal() +
labs(title = paste("Histograma de", m)) +
theme(legend.position = "bottom")
})
# Mostrar de 4 en 4
n <- 4  # Cambia a 3 si quieres 3 en 3
for (i in seq(1, length(plots), by = n)) {
do.call(grid.arrange, c(plots[i:min(i + n - 1, length(plots))], ncol = 2))
}
library(ggplot2)
library(knitr)
library(ggplot2)
library(gridExtra)
# lista de metabolitos
metabs <- unique(df_long$Metabolite)
# generar histograma para cada metabolito
plots <- lapply(metabs, function(m) {
ggplot(
dplyr::filter(df_long, Metabolite == m),
aes(x = Value, fill = Group)
) +
geom_histogram(bins = 30, alpha = 0.6, position = "identity") +
theme_minimal() +
labs(title = paste("Histograma de", m)) +
theme(legend.position = "bottom")
})
# Mostrar de 4 en 4
n <- 3  # Cambia a 3 si quieres 3 en 3
for (i in seq(1, length(plots), by = n)) {
do.call(grid.arrange, c(plots[i:min(i + n - 1, length(plots))], ncol = 1))
}
library(ggplot2)
library(knitr)
library(ggplot2)
library(gridExtra)
# lista de metabolitos
metabs <- unique(df_long$Metabolite)
# generar histograma para cada metabolito
plots <- lapply(metabs, function(m) {
ggplot(
dplyr::filter(df_long, Metabolite == m),
aes(x = Value, fill = Group)
) +
geom_histogram(bins = 30, alpha = 0.6, position = "identity") +
theme_minimal() +
labs(title = paste("Histograma de", m)) +
theme(legend.position = "bottom")
})
# Mostrar de 4 en 4
n <- 3  # Cambia a 3 si quieres 3 en 3
for (i in seq(1, length(plots), by = n)) {
do.call(grid.arrange, c(plots[i:min(i + n - 1, length(plots))], ncol = 3))
}
library(ggplot2)
library(knitr)
library(ggplot2)
library(gridExtra)
# lista de metabolitos
metabs <- unique(df_long$Metabolite)
# generar histograma para cada metabolito
plots <- lapply(metabs, function(m) {
ggplot(
dplyr::filter(df_long, Metabolite == m),
aes(x = Value, fill = Group)
) +
geom_histogram(bins = 30, alpha = 0.6, position = "identity") +
theme_minimal() +
labs(title = paste("Histograma de", m)) +
theme(legend.position = "bottom")
})
# Mostrar varios graficos en la misma linea
n <- 6
for (i in seq(1, length(plots), by = n)) {
do.call(grid.arrange, c(plots[i:min(i + n - 1, length(plots))], ncol = 3))
}
library(ggplot2)
library(knitr)
library(ggplot2)
library(gridExtra)
# lista de metabolitos
metabs <- unique(df_long$Metabolite)
# generar histograma para cada metabolito
plots <- lapply(metabs, function(m) {
ggplot(
dplyr::filter(df_long, Metabolite == m),
aes(x = Value, fill = Group)
) +
geom_histogram(bins = 30, alpha = 0.6, position = "identity") +
theme_minimal() +
labs(title = paste("Histograma de", m)) +
theme(legend.position = "bottom")
plot.title = element_text(size = 16, face = "bold")
})
# Mostrar varios graficos en la misma linea
n <- 6
for (i in seq(1, length(plots), by = n)) {
do.call(grid.arrange, c(plots[i:min(i + n - 1, length(plots))], ncol = 3))
}
library(ggplot2)
library(knitr)
library(ggplot2)
library(gridExtra)
# lista de metabolitos
metabs <- unique(df_long$Metabolite)
# generar histograma para cada metabolito
plots <- lapply(metabs, function(m) {
ggplot(
dplyr::filter(df_long, Metabolite == m),
aes(x = Value, fill = Group)
) +
geom_histogram(bins = 30, alpha = 0.6, position = "identity") +
theme_minimal() +
labs(title = paste("Histograma de", m)) +
theme(
legend.position = "bottom",
plot.title = element_text(size = 16, face = "bold")
)
})
# Mostrar varios graficos en la misma linea
n <- 6
for (i in seq(1, length(plots), by = n)) {
do.call(grid.arrange, c(plots[i:min(i + n - 1, length(plots))], ncol = 3))
}
library(ggplot2)
library(knitr)
library(ggplot2)
library(gridExtra)
# lista de metabolitos
metabs <- unique(df_long$Metabolite)
# generar histograma para cada metabolito
plots <- lapply(metabs, function(m) {
ggplot(
dplyr::filter(df_long, Metabolite == m),
aes(x = Value, fill = Group)
) +
geom_histogram(bins = 30, alpha = 0.6, position = "identity") +
theme_minimal() +
labs(title = paste("Histograma de", m)) +
theme(
legend.position = "bottom",
plot.title = element_text(size = 10, face = "bold")
)
})
# Mostrar varios graficos en la misma linea
n <- 6
for (i in seq(1, length(plots), by = n)) {
do.call(grid.arrange, c(plots[i:min(i + n - 1, length(plots))], ncol = 3))
}
library(ggplot2)
library(knitr)
library(ggplot2)
library(gridExtra)
# lista de metabolitos
metabs <- unique(df_long$Metabolite)
# generar histograma para cada metabolito
plots <- lapply(metabs, function(m) {
ggplot(
dplyr::filter(df_long, Metabolite == m),
aes(x = Value, fill = Group)
) +
geom_histogram(bins = 30, alpha = 0.6, position = "identity") +
theme_minimal() +
labs(title = paste("Histograma de", m)) +
theme(
legend.position = "bottom",
plot.title = element_text(size = 8, face = "bold")
)
})
# Mostrar varios graficos en la misma linea
n <- 6
for (i in seq(1, length(plots), by = n)) {
do.call(grid.arrange, c(plots[i:min(i + n - 1, length(plots))], ncol = 3))
}
library(ggplot2)
library(knitr)
library(ggplot2)
library(gridExtra)
# lista de metabolitos
metabs <- unique(df_long$Metabolite)
# generar histograma para cada metabolito
plots <- lapply(metabs, function(m) {
ggplot(
dplyr::filter(df_long, Metabolite == m),
aes(x = Value, fill = Group)
) +
geom_histogram(bins = 30, alpha = 0.6, position = "identity") +
theme_minimal() +
labs(title = paste("Histograma de", m)) +
theme(
legend.position = "bottom",
plot.title = element_text(size = 8, face = "bold")
)
})
# Mostrar varios graficos en la misma linea
n <- 8
for (i in seq(1, length(plots), by = n)) {
do.call(grid.arrange, c(plots[i:min(i + n - 1, length(plots))], ncol = 4))
}
library(ggplot2)
library(knitr)
library(ggplot2)
library(gridExtra)
# lista de metabolitos
metabs <- unique(df_long$Metabolite)
# generar histograma para cada metabolito
plots <- lapply(metabs, function(m) {
ggplot(
dplyr::filter(df_long, Metabolite == m),
aes(x = Value, fill = Group)
) +
geom_histogram(bins = 30, alpha = 0.6, position = "identity") +
theme_minimal() +
labs(title = paste("Histograma de", m)) +
theme(
legend.position = "bottom",
plot.title = element_text(size = 5, face = "bold")
)
})
# Mostrar varios graficos en la misma linea
n <- 8
for (i in seq(1, length(plots), by = n)) {
do.call(grid.arrange, c(plots[i:min(i + n - 1, length(plots))], ncol = 4))
}
library(ggplot2)
library(knitr)
library(ggplot2)
library(gridExtra)
# lista de metabolitos
metabs <- unique(df_long$Metabolite)
# generar histograma para cada metabolito
plots <- lapply(metabs, function(m) {
ggplot(
dplyr::filter(df_long, Metabolite == m),
aes(x = Value, fill = Group)
) +
geom_histogram(bins = 30, alpha = 0.6, position = "identity") +
theme_minimal() +
labs(title = paste("Histograma de", m)) +
theme(
legend.position = "bottom",
plot.title = element_text(size = 7, face = "bold")
)
})
# Mostrar varios graficos en la misma linea
n <- 8
for (i in seq(1, length(plots), by = n)) {
do.call(grid.arrange, c(plots[i:min(i + n - 1, length(plots))], ncol = 4))
}
# generar bloxplot por cada metabolito
boxplots <- lapply(metabs, function(m) {
ggplot(
dplyr::filter(df_long, Metabolite == m),
aes(x = Group, y = Value, fill = Group)
) +
geom_boxplot() +
theme_minimal() +
labs(title = paste("Boxplot de", m)) +
theme(
legend.position = "none",
plot.title = element_text(size = 7, face = "bold")
)
})
# Mostrar de 4 en 4
n <- 8
for (i in seq(1, length(boxplots), by = n)) {
do.call(grid.arrange, c(boxplots[i:min(i + n - 1, length(boxplots))], ncol = 4))
}
